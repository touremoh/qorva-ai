spring:
  data:
    mongodb:
      uri: ${SPRING_DATA_MONGO_URL}
      database: ${SPRING_DATA_MONGO_DATABASE_NAME}

  ai:
    openai:
      api-key: ${SPRING_AI_OPENAI_API_KEY}
      embedding:
        base-url: ${SPRING_AI_OPENAI_EMBEDDING_BASE_URL}
        options:
          model: ${SPRING_AI_OPENAI_EMBEDDING_MODEL}
    chat:
      client:
        enabled: true
    model:
      embedding: openai
    vectorstore:
      mongodb:
        initialize-schema: false
        collection-name: ${SPRING_AI_VECTOR_COLL_NAME}
        index-name: ${SPRING_AI_VECTOR_INDEX}
        path-name: ${SPRING_AI_VECTOR_PATH_NAME}

  mail:
    host: ${MAIL_HOST}
    port: ${MAIL_PORT}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    from: ${MAIL_FROM}
    protocol: ${MAIL_PROTOCOL}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000

  security:
    oauth2:
      client:
        registration:
          office365:
            client-id: ${OFFICE_365_CLIENT_ID}
            client-secret: ${OFFICE_365_CLIENT_SECRET}
            scope: ${OFFICE_365_SCOPE}
            authorization-grant-type: ${OFFICE_365_AUTH_GRANT_TYPE}
        provider:
          office365:
            token-uri: ${OFFICE_365_TOKEN_URI}
            authorization-uri: ${OFFICE_365_AUTH_URI}
            user-info-uri: ${OFFICE_365_USER_INFO_URI}

server:
  port: 8080 # Expected port from App Runner

logging:
  level:
    root: INFO
    ai:
      qorva:
        core: INFO

regex:
  email: ${EMAIL_CHECK_REGEX}
  password: ${PASSWORD_CHECK_REGEX}
  activationCode: ${ACTIVATION_CODE_REGEX}

weblink:
  allowedOrigins: ${ALLOWED_ORIGINS}

jwt:
  secret: ${JWT_SECRET}
  timeToLiveInMillis: 360000

stripe:
  secret-key: ${STRIPE_SECRET_KEY}
  webhook:
    secret: ${STRIPE_WEBHOOK_SECRET}
  session:
    return-url: ${STRIPE_SESSION_URL}

qorva:
  notifications:
    enabled: ${QORVA_NOTIFICATION_ENABLED}
